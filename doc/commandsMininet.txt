===========================================================================================================
POX
===========================================================================================================
 
./pox.py log.level --DEBUG misc.dtsa &

./pox.py log.level --DEBUG openflow.discovery openflow.spanning_tree misc.dtsa &

./pox.py log.level --DEBUG openflow.discovery prueba &

./pox.py log.level --DEBUG openflow.discovery openflow.spanning_tree forwarding.l2_multi misc.dtsa &

===========================================================================================================
MN
===========================================================================================================

mn con topologia customizada: 
 sudo mn --custom /home/mininet/jose/mininet/customTopo.py --topo mytopo --controller=remote --mac

 sudo mn --custom

mn con topologia linear:
 sudo mn --topo linear,N --mac

===========================================================================================================
DPCTL
===========================================================================================================

para que funcione DTSA en topologia linear:
 > en xterm s1(root) h1 -> h2
   # dpctl add-flow tcp:127.0.0.1:6634 in_port=1,actions=output:2
 > en xterm s2(root):
   # dpctl add-flow tcp:127.0.0.1:6634 in_port=2,actions=output:1

mostar flujos en xterm s1(root):
# dpctl dump-flows tcp:127.0.0.1:6634      ||     dpctl dump-flows tcp:localhost:6634

# ovs-ofctl show s2

mininet> ovs-ofctl dump-flows s1

# ovs-ofctl queue-stats s2

# ovs-vsctl list Queue                         

# ovs-vsctl list QoS

# ovs-ofctl snoop tcp:127.0.0.1:6634

?????
# ovs-vsctl -- set port eth0 qos=@newqos -- --id=@newqos create qos type=linux-htb
              other-config:max-rate=1000000  queues:0=@newqueue -- --id=@newqueue create queue
              other-config:min-rate=1000000 other-config:max-rate=1000000


10 Mbits/sec
  # ovs-vsctl -- set port eth0 qos=@newqos -- --id=@newqos create qos type=linux-htb other-config:max-rate=8800000  queues:0=@newqueue -- --id=@newqueue create queue other-config:min-rate=7500000 other-config:max-rate=8800000

5 Mbits/sec
  # ovs-vsctl -- set port s2-eth2 qos=@newqos -- --id=@newqos create qos type=linux-htb other-config:max-rate=5000000  queues:0=@newqueue -- --id=@newqueue create queue other-config:min-rate=5000000 other-config:max-rate=5000000

===========================================================================================================
TC
===========================================================================================================

Mostrar clases com mas informacion
 tc -s class show dev s1-eth1

tc qdisc add dev $DEV root handle 1: cbq avpkt 1000 bandwidth 100mbit

tc class change dev nf2c2 parent 1: classid 1:ffff htb rate 10000kbit ceil 10000kbit

tc qdisc add dev $DEV root handle 1: htb rate 10000kbit ceil 10000kbit

tc qdisc add dev $DEV root handle 1: htb

tc class add dev $DEV parent 1: classid 1:1 cbq rate 256kbit allot 1500 prio 5 bounded isolated

tc class add dev $DEV parent 1: classid 1:1 htb rate 10000kbit ceil 10000kbit

===========================================================================================================
SSH
===========================================================================================================

copiar arquivos desde la VM:
 scp mininet@172.16.200.129:mininet/doc/latex/* .

copiar arquivos hacia la VM:
 scp -r dts-client mininet@172.16.200.129:~/

login en la VM mia de mininet:
 ssh -y -X mininet@172.16.200.12

login en la VM de QoSFlow:
 ssh -y -X openflow@172.16.200.128
 
copiar pox a la ilha:
 scp -P 1026 -r pox jcastillo@ofelia.facom.ufu.br:~/

===========================================================================================================
SVN
===========================================================================================================

volver a una versión anterior determinada N:
 svn update -r N

===========================================================================================================

Quality of Service (QoS)
    Create a linux-htb QoS record that points to a few queues and use it on eth0 and eth1:

        ovs-vsctl -- set Port eth0 qos=@newqos \

        -- set Port eth1 qos=@newqos \

        --   --id=@newqos  create  QoS  type=linux-htb  other-config:max-rate=1000000000 queues=0=@q0,1=@q1 \

        --   --id=@q0   create    Queue    other-config:min-rate=100000000    other-con‐fig:max-rate=100000000 \

        -- --id=@q1 create Queue other-config:min-rate=500000000

    Deconfigure the QoS record above from eth1 only:

        ovs-vsctl clear Port eth1 qos

    To  deconfigure  the  QoS record from both eth0 and eth1 and then delete the QoS record 
    (which must be done explicitly because unreferenced QoS records are  not  automatically
    destroyed):

        ovs-vsctl -- destroy QoS eth0 -- clear Port eth0 qos -- clear Port eth1 qos

    (This  command  will  leave  two unreferenced Queue records in the database.  To delete
    them, use "ovs-vsctl list Queue" to find their UUIDs,  then  "ovs-vsctl  destroy  Queue
    uuid1 uuid2" to destroy each of them.)

===========================================================================================================
FFMPEG
===========================================================================================================

(h5 wor)    32c044dfea70a1f4bee5e866

s(h1):>  ~578
   sudo ffmpeg -re -i highway_cif.264 -f mpegts -vcodec mpeg4 -strict -2 -acodec ac3 -ac 1 -ab 128k -r 15 -b:v 500k -threads 2 etcp:32c044dfea70a1f4bee5e866:eth0

ffmpeg -re -i blockhead.mp4 etcp:32c044dfea70a1f4bee5e866:h5-eth1

c(h5):> ffplay etcp:Pe7!e49c01?00c6,f59f:h5-eth1

ffplay etcp:32c044dfea70a1f4bee5e866:h1-eth1
